ctmc
const k;
const T=k*1000;
const double r = 1;
const double mR = 1/600;
const double lR = 1-mR;
const double hR1 = 0.25;
const double hR2 = 0.25;
const double hR3 = 0.25;
const double hR4 = 0.25;
const double rB = 1/12.6;
const int N = 100;

module Miner1

Miner1 : [0..TBD] init 0;
b1 : block {m1,0;genesis,0} ;
B1 : blockchain [{genesis,0;genesis,0}];
c1 : [0..N] init 0;
setMiner1 : list [];

[LPHKS] (Miner1=0) -> hR1 : (b1'=createB(b1,B1,c1))&(c1'=c1+1)&(Miner1'=2);
[TBJTA] (Miner1=0) -> hR1 : (Miner1'=3);
[LBSZM] (Miner1=2) -> rB : (B1'=addBlock(B1,b1))&(Miner1'=0);
[] (Miner1=3)&!isEmpty(set1) -> 1 : (Miner1'=4);
[] (Miner1=4) -> r : (b1'=extractBlock(set1))&(Miner1'=5); 
[ZOAFT] (Miner1=5) -> 1 : (setMiner1' = addBlockSet(setMiner1 , b1))&(Miner1'=0);
[] (Miner1=3)&!!isEmpty(set1) -> 1 : (Miner1'=6);
[] (Miner1=6)&canBeInserted(B1,b1) -> 1 : (Miner1'=7);
[] (Miner1=7) -> 1 : (B1'=addBlock(B1,b1))&(setMiner1'=removeBlock(setMiner1,b1))&(Miner1'=0); 
[] (Miner1=6)&!canBeInserted(B1,b1) -> 1 : (Miner1'=0);


endmodule

module Miner2

Miner2 : [0..TBD] init 0;
b2 : block {m2,0;genesis,0} ;
B2 : blockchain [{genesis,0;genesis,0}];
c2 : [0..N] init 0;
setMiner2 : list [];

[LYMDW] (Miner2=0) -> hR2 : (b2'=createB(b2,B2,c2))&(c2'=c2+1)&(Miner2'=2);
[NIQVO] (Miner2=0) -> hR2 : (Miner2'=3);
[LODFR] (Miner2=2) -> rB : (B2'=addBlock(B2,b2))&(Miner2'=0);
[] (Miner2=3)&!isEmpty(set2) -> 1 : (Miner2'=4);
[] (Miner2=4) -> r : (b2'=extractBlock(set2))&(Miner2'=5); 
[LMGQP] (Miner2=5) -> 1 : (setMiner2' = addBlockSet(setMiner2 , b2))&(Miner2'=0);
[] (Miner2=3)&!!isEmpty(set2) -> 1 : (Miner2'=6);
[] (Miner2=6)&canBeInserted(B2,b2) -> 1 : (Miner2'=7);
[] (Miner2=7) -> 1 : (B2'=addBlock(B2,b2))&(setMiner2'=removeBlock(setMiner2,b2))&(Miner2'=0); 
[] (Miner2=6)&!canBeInserted(B2,b2) -> 1 : (Miner2'=0);


endmodule

module Miner3

Miner3 : [0..TBD] init 0;
b3 : block {m3,0;genesis,0} ;
B3 : blockchain [{genesis,0;genesis,0}];
c3 : [0..N] init 0;
setMiner3 : list [];

[QVYUL] (Miner3=0) -> hR3 : (b3'=createB(b3,B3,c3))&(c3'=c3+1)&(Miner3'=2);
[ZKUST] (Miner3=0) -> hR3 : (Miner3'=3);
[LLKBT] (Miner3=2) -> rB : (B3'=addBlock(B3,b3))&(Miner3'=0);
[] (Miner3=3)&!isEmpty(set3) -> 1 : (Miner3'=4);
[] (Miner3=4) -> r : (b3'=extractBlock(set3))&(Miner3'=5); 
[BOMQC] (Miner3=5) -> 1 : (setMiner3' = addBlockSet(setMiner3 , b3))&(Miner3'=0);
[] (Miner3=3)&!!isEmpty(set3) -> 1 : (Miner3'=6);
[] (Miner3=6)&canBeInserted(B3,b3) -> 1 : (Miner3'=7);
[] (Miner3=7) -> 1 : (B3'=addBlock(B3,b3))&(setMiner3'=removeBlock(setMiner3,b3))&(Miner3'=0); 
[] (Miner3=6)&!canBeInserted(B3,b3) -> 1 : (Miner3'=0);


endmodule

module Miner4

Miner4 : [0..TBD] init 0;
b4 : block {m4,0;genesis,0} ;
B4 : blockchain [{genesis,0;genesis,0}];
c4 : [0..N] init 0;
setMiner4 : list [];

[KLZTJ] (Miner4=0) -> hR4 : (b4'=createB(b4,B4,c4))&(c4'=c4+1)&(Miner4'=2);
[VVZXK] (Miner4=0) -> hR4 : (Miner4'=3);
[DLIHN] (Miner4=2) -> rB : (B4'=addBlock(B4,b4))&(Miner4'=0);
[] (Miner4=3)&!isEmpty(set4) -> 1 : (Miner4'=4);
[] (Miner4=4) -> r : (b4'=extractBlock(set4))&(Miner4'=5); 
[POXVR] (Miner4=5) -> 1 : (setMiner4' = addBlockSet(setMiner4 , b4))&(Miner4'=0);
[] (Miner4=3)&!!isEmpty(set4) -> 1 : (Miner4'=6);
[] (Miner4=6)&canBeInserted(B4,b4) -> 1 : (Miner4'=7);
[] (Miner4=7) -> 1 : (B4'=addBlock(B4,b4))&(setMiner4'=removeBlock(setMiner4,b4))&(Miner4'=0); 
[] (Miner4=6)&!canBeInserted(B4,b4) -> 1 : (Miner4'=0);


endmodule

module Network

Network : [0..TBD] init 0;
set1 : list [];
set2 : list [];
set3 : list [];
set4 : list [];

[LBSZM] (Network=0) -> 1 : (set2'=addBlockSet(set2,b2))&(set3'=addBlockSet(set3,b3))&(set4'=addBlockSet(set4,b4))&&(Network'=0);
[ZOAFT] (Network=0) -> 1 : (set1' = removeBlock(set1,b1))&(Network'=0);
[LODFR] (Network=0) -> 1 : (set1'=addBlockSet(set1,b1))&(set3'=addBlockSet(set3,b3))&(set4'=addBlockSet(set4,b4))&&(Network'=0);
[LMGQP] (Network=0) -> 1 : (set2' = removeBlock(set2,b2))&(Network'=0);
[LLKBT] (Network=0) -> 1 : (set1'=addBlockSet(set1,b1))&(set2'=addBlockSet(set2,b2))&(set4'=addBlockSet(set4,b4))&&(Network'=0);
[BOMQC] (Network=0) -> 1 : (set3' = removeBlock(set3,b3))&(Network'=0);
[DLIHN] (Network=0) -> 1 : (set1'=addBlockSet(set1,b1))&(set2'=addBlockSet(set2,b2))&(set3'=addBlockSet(set3,b3))&&(Network'=0);
[POXVR] (Network=0) -> 1 : (set4' = removeBlock(set4,b4))&(Network'=0);

endmodule

module Hasher1

Hasher1 : [0..TBD] init 0;

[LPHKS] (Hasher1=0) -> mR : (Hasher1'=0);
[TBJTA] (Hasher1=0) -> lR : (Hasher1'=0);

endmodule

module Hasher2

Hasher2 : [0..TBD] init 0;

[LYMDW] (Hasher2=0) -> mR : (Hasher2'=0);
[NIQVO] (Hasher2=0) -> lR : (Hasher2'=0);

endmodule

module Hasher3

Hasher3 : [0..TBD] init 0;

[QVYUL] (Hasher3=0) -> mR : (Hasher3'=0);
[ZKUST] (Hasher3=0) -> lR : (Hasher3'=0);

endmodule

module Hasher4

Hasher4 : [0..TBD] init 0;

[KLZTJ] (Hasher4=0) -> mR : (Hasher4'=0);
[VVZXK] (Hasher4=0) -> lR : (Hasher4'=0);

endmodule

